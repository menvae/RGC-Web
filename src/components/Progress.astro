---
const { visible = false, status = "", progress = 0 } = Astro.props;

const progressWidth = Math.min(100, Math.max(0, progress));
---

<style>
  .progress-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(27, 0, 21, 0.651);
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    z-index: 9999;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.3s ease;
  }

  .progress-overlay.visible {
    opacity: 1;
    pointer-events: auto;
  }

  .progress-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    max-width: 300px;
    width: 100%;
    padding: 0 20px;
  }

  .progress-spinner {
    width: 50px;
    height: 50px;
    border: 5px solid rgba(36, 0, 37, 0.3);
    border-radius: 50%;
    border-top-color: #8d3196;
    animation: spin 1s linear infinite;
    margin-bottom: 20px;
  }

  .progress-status {
    color: white;
    font-size: 1.1rem;
    margin-bottom: 20px;
    text-align: center;
  }

  .progress-bar-container {
    width: 100%;
    max-width: 250px;
  }

  .progress-bar {
    width: 100%;
    height: 6px;
    background-color: rgb(30, 0, 31);
    border-radius: 2px;
    overflow: hidden;
  }

  .progress-bar-fill {
    height: 100%;
    background-color: #a01ea5;
    width: 0%;
    transition: width 0.3s ease;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }
</style>

<div id="rgc-progress" class={`progress-overlay ${visible ? 'visible' : ''}`}>
  <div class="progress-content">
    <div class="progress-spinner"></div>
    <div class="progress-status">{status}</div>
    <div class="progress-bar-container">
      <div class="progress-bar">
        <div class="progress-bar-fill" style={`width: ${progressWidth}%`}></div>
      </div>
    </div>
  </div>
</div>

<script is:inline>
  const progressEl = document.getElementById('rgc-progress');
  
  if (progressEl) {
    progressEl.show = function(status = "", progress = 0) {
      this.setAttribute('visible', 'true');
      this.querySelector('.progress-status').textContent = status;
      this.querySelector('.progress-bar-fill').style.width = `${progress}%`;
      this.classList.add('visible');
      return this;
    };
    
    progressEl.hide = function() {
      this.setAttribute('visible', 'false');
      this.classList.remove('visible');
      return this;
    };
    
    progressEl.update = function(status, progress) {
      if (status !== undefined) {
        this.querySelector('.progress-status').textContent = status;
      }
      if (progress !== undefined) {
        this.querySelector('.progress-bar-fill').style.width = `${progress}%`;
      }
      return this;
    };
    
    progressEl.remove = function() {
      this.hide();
      setTimeout(() => {
        this.parentNode?.removeChild(this);
      }, 300);
    };
  }
</script>